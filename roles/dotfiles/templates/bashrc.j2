## -*- mode: sh -*-

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

{% if ansible_os_family == "Gentoo" %}
{% set bash_completion_path = '/etc/bash/bashrc.d/bash_completion.sh' %}
{% elif ansible_os_family == "RedHat" %}
{% set bash_completion_path = '/etc/profile.d/bash_completion.sh' %}
{% else %}
{% set bash_completion_path = '/etc/profile.d/bash_completion.sh' %}
{% endif -%}

## NOTE: **LOGIN SHELL** if ~/.bash_profile and ~/.profile BOTH exist
## 'sudo su - user' ONLY source ~/.bash_profile NOT source ~/.profile

TIMESTAMP=$(date +"%F %T")
echo "__~/.BASHRC: $TIMESTAMP PPID $PPID PID $PID $0" >> /tmp/.shrc

## XXX [Y] auto source
[ -f {{ bash_completion_path }} ] && source {{ bash_completion_path }}

## XXX [?] source them in ~/.bash_profile
#[ -f /etc/bashrc ] && . /etc/bashrc
[ -f ~/.env ] && source ~/.env
[ -f ~/.shrc ] && source ~/.shrc
[ -f ~/.bash.local ] && source ~/.bash.local

# [ bash-only ]
#--------------------------------------------

# 去除重复历史记录。bash(1) for more options
# ... or force ignoredups and ignorespace
#HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# HISTSIZE 控制历史命令记录的总行数,默认 500
export HISTSIZE=40960
export HISTTIMEFORMAT="%F %T "


# [ PS1 Prompt ]
#--------------------------------------------

## man bash PROMPTING

## \e     an ASCII escape character (033)
## \h     the hostname up to the first '.'
## \H     the hostname
## \w     the current working directory
## \W     the basename of the current working directory
## \u     the username of the current user

## man console_codes

## | color | foreground | background |
## |-------+------------+------------|
## | bold  |          1 |          - |
## | red   |         31 |         41 |
## | green |         32 |         42 |
## | blue  |         34 |         44 |

## ESC (0x1B, ^[) starts an escape sequence

## man ascii

## Oct   Dec   Hex   Char                        Oct   Dec   Hex   Char
## ------------------------------------------------------------------------
## 033   27    1B    ESC (escape)                133   91    5B    [ ]

function _git_prompt {

    ## XXX 旧版 ( centos 5 ) git 不支持 -u normal 参数
    local git_status="`LANG=en_US.UTF-8 git status -unormal 2>&1`"

    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local ansi=42
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local ansi=43
        else
            local ansi=45
        fi
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
            test "$branch" != master || branch=' '
        else
            #branch="(`git branch --no-color 2> /dev/null|cut -d' ' -f2`)"
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)"
        fi
        echo -n '\[\e[0;37;'"$ansi"';1m\]'"$branch"'\[\e[0m\]'
    fi
}

## XXX 单独使用 PS1，没有调用 PROMPT_COMMAND 函数
## 1. 不会时事更新 git 信息
## 2. [?] 是否动态修改 screen 标题栏
#prompt_str="`_git_prompt`"'\w \n \$ '

# XXX 使用 \[ ... \] 包裹 screen 标题栏的 目录 | vim 等程序才能正常显示
if [[ ${EUID} == 0 ]] ; then
    ## 使用 '单引号' 引用，防止 '\$' 被 "双引号" 转义
    ## root use  ${PWD} absolute path
    prompt_str=' \[\e[1;31m\]\u@${HOSTNAME} \[\e[01;34m\]${PWD} \n \$ '
    ## sudo su - 切换到 root 用户 tmux title 格式 user@host path
    # path_title='\[\ek\u@\h:\w\e\\\]'
else
    prompt_str=' \[\e[1;34m\]${HOSTNAME} \w \n \[\e[1;32m\]\$ '
    # path_title='\[\ek\W\e\\\]'
fi

path_title='\[\ek\u@\h:\w\e\\\]'

# if [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; then
#     PS1_HOSTNAME=
# else
#     PS1_HOSTNAME="@$HOSTNAME"
# fi

case "$TERM" in
    screen*)

        function ssh {
            local ssh_args=`echo $1|sed 's:.*@::'`
            echo -n -e "\ek@${ssh_args}\e\\"
            ## function rssh
            nssh "$@"
        }

        program_title='\[\ek\e\\\]'  # [?] 程序标题
        prompt_str="${program_title}${path_title}${prompt_str}"

        ;;
    *)
        ;;
esac

function _prompt_command {
    PS1="`_git_prompt`"$prompt_str
    ## 加粗输入的命令
    trap 'echo -ne "\e[0m"' DEBUG
}

PROMPT_COMMAND=_prompt_command



# vim:set et ft=sh sw=4 sts=4 ts=4 nopaste :
