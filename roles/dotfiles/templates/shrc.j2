#!/bin/sh

# [ man keychain ]
#--------------------------------------------
## XXX 机器重启 ~/.keychain/${HOSTNAME}-sh 文件还在
[[ -z "$HOSTNAME" ]] && HOSTNAME=`uname -n`
[[ -f ${HOME}/.keychain/${HOSTNAME}-sh ]] && . $HOME/.keychain/${HOSTNAME}-sh
[[ -f ${HOME}/.keychain/${HOSTNAME}-sh-gpg ]] && . $HOME/.keychain/${HOSTNAME}-sh-gpg

# }}}

# type -a time
# whereis time | tr ' ' '\n' | grep bin
# which time

# [ function ]
#--------------------------------------------

function kk { keychain --nogui ~/.ssh/id_rsa; }
function ks { source ~/.keychain/${HOSTNAME}-sh; }

function gitweek {
    local day=$1
    if [ -z $day ]
    then
        day=7
    fi
    for i in `git log -n $day|awk '/commit/{print $2}'`
    do
        git show --pretty="format:" --name-only $i
    done
}

# [ reference ]
#--------------------------------------------


alias  ~='cd ~'
alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."

alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -iv --preserve-root'   ## 防止杯具: rm / 下面这几个命令 chgrp chown chmod 也有该参数
alias ln='ln -iv'

# [ ls ]# 
#--------------------------------------------
# XXX [?] 下面的别名都会将 ls 使用上面的代替，无须在重复相应参数

#alias lx='ls -xX'                                   # x 按行排列，X 按文件扩展名字母顺序排序
alias ls='ls -Fx --color=auto'                      # 颜色，文件类型标志符，横向排列
alias la='ls -A'

#alias ll='ls -lh --time-style=+%Y-%m-%d'
#alias ll='ls -lh --time-style=long-iso'

# XXX 注意，开头的 $ 符号转义: 时间戳 颜色 格式化字符 From : roylez
# 红蓝 时间戳 高亮
#alias ll=$'ls -lh --color=auto -X --time-style="+\e[33m| \e[34m%Y-%m-%d \e[33m|\e[m"'
# 黄色分隔线 分隔时间戳
alias ll=$'ls -lh --color=auto -X --time-style="+\e[33m|\e[0m %Y-%m-%d \e[33m|\e[0m"'
# %F %T ==> %Y-%m-%d %H:%M 显示文件修改的准确时间，并按照修改时间排序
alias lt=$'ls -lht --color=auto -X --time-style="+\e[33m|\e[0m %F %T \e[33m|\e[0m"'


# [ git ]
#--------------------------------------------
alias ga='git add'
alias gc='git commit '
alias gca='git commit -a -m'
alias gcl='git config -l'
alias gce='git config -e'
alias gd='git diff'
alias gl='git ls-files'
alias gs='git status'
alias gb='git branch'
alias gbc='git checkout'
alias gp='git push'
alias gu='git pull'
alias gpu='git pull --rebase origin master'
alias gpo="git push origin master"

# [ system ]
#--------------------------------------------

alias c='clear'
alias df="df -hT"
alias du="du -h"
alias exit="clear; exit"
alias grep='grep --color=auto -d skip -iI'
alias less='less -iR'

# From : http://git.sysphere.org/dotfiles/tree/zshrc?h=public


# [ soft ]
#--------------------------------------------

alias tx='tmux -2u'
[ -f /usr/bin/gvim ] && alias vim='gvim -v'

{% if ansible_distribution == 'Archlinux' %}
# [ archlinux pacman ]# {{{
#--------------------------------------------

alias P="pacman"
alias Y="yaourt"

# 在 后面添加 空格，可以实现自动补全
alias spm='sudo pacman'
# --need 跳过已经是最新的安装包，不重新安装
alias pac="sudo pacman -S --need"
alias pq='pacman -Q '
alias pi='pacman -Qi '
alias pl='pacman -Ql '
alias pm='sudo pacman -Rsun '
alias pu="sudo pacman -Scc && sudo pacman -Sy && sudo pacman -Su"
alias py="sudo pacman -Sy"

alias yao="sudo yaourt -S "
alias ys="yaourt -Ss "
# 若要实现 yaourt 查询软件包，可以取消注释 /etc/yaourtrc
# AURUPGRADE=0
# AURSEARCH=0
# 使用额外的 --aur 指定查询 AUR 里面的软件包，其他类似 pacman
alias yq="yaourt -Q "
alias yu="sudo yaourt -Su"
alias yy="sudo yaourt -Sy"

# 使用 'pacsearch packagename' 查找pkg，只列出软件包的名称，版本号，没有描述信息
#alias pacsearch="pacman -Sl | cut -d' ' -f2 | grep "

# pacman 查找 输出彩色
#alias pacs="pacman -Ss "
alias pacs="pacsearch"
pacsearch()
{
    echo -e "$(pacman -Ss $@ | sed \
    -e 's#core/.*#\\033[1;31m&\\033[0;37m#g' \
    -e 's#extra/.*#\\033[0;32m&\\033[0;37m#g' \
    -e 's#community/.*#\\033[1;35m&\\033[0;37m#g' \
    -e 's#^.*/.* [0-9].*#\\033[0;36m&\\033[0;37m#g' )"
}

## XXX 单行函数格式报错，需要用 ';' 断行
po() { pacman -Qo `which "$1"`; }

# https://github.com/milomouse/dotfiles/blob/master/zsh/functions
# check ownership of given argument, as determined by pacman:
function owns {
  if [[ -n $(for each in ${PATH//:\\\n}; do find ${each}/$1 2>/dev/null ; done) ]]
  then pacman -Qo $(which -p $1)
  else pacman -Qo $1 ; fi
}

# }}}
{% endif %}

{% if ansible_distribution == 'Fedora' %}
## [ fedora ]#{{{
##--------------------------------------------

alias vx="vimx"
#alias vim="vimx"

#}}}
{% endif %}

function mkcd { command mkdir -p "$@" && cd "$@" ;}

function rssh {
/usr/bin/ssh -l root -o ConnectTimeout=2 \
-o ServerAliveInterval=120 \
-o StrictHostKeyChecking=no \
-o UserKnownHostsFile=/dev/null "$@"
}

function nssh {
#/usr/bin/ssh -C4 \
/usr/bin/ssh -o ConnectTimeout=2 \
-o ServerAliveInterval=120 \
-o StrictHostKeyChecking=no \
-o UserKnownHostsFile=/dev/null "$@"
}

function ixio {
    ## cat - | curl -sF 'f:1=<-' ix.io
    ## <cmd> |& curl -F 'f:1=<-' ix.io
    ## lspci -nn |& curl -F 'f:1=<-' ix.io
    curl -sF 'f:1=<-' http://ix.io/
}


alias ee='emacsclient -t'

## http://mjwall.com/blog/2013/10/04/how-i-use-emacs/
## emacsclient options for reference
## -a "" starts emacs daemon and reattaches
## -c creates a new frame
## -n returns control back to the terminal
## -e eval the script

## Number of current visible frames, Emacs daemon always has a visible frame called F1
visible_frames() {
  emacsclient -a "" -e '(length (visible-frame-list))'
}

change_focus() {
  emacsclient -n -e "(select-frame-set-input-focus (selected-frame))" > /dev/null
}

function ec {
    # try switching to the frame incase it is just minimized
    # will start a server if not running
    test "$(visible_frames)" -eq "1" && change_focus

    if [ "$(visible_frames)" -lt  "2" ]; then # need to create a frame
    # -c $@ with no args just opens the scratch buffer
    emacsclient -n -c "$@" && change_focus
    else # there is already a visible frame besides the daemon, so
    change_focus
    # -n $@ errors if there are no args
    test  "$#" -ne "0" && emacsclient -n "$@"
    fi
}

function et {
    ## ec -e "(message \"Hello\")" > /dev/null
    exec emacsclient -a "" -t "$@"
}

server_ok() {
  emacsclient -a "false" -e "(boundp 'server-process)"
}

## stop emacs daemon
function es() {
    if [ "t" == "$(server_ok)" ]; then
    echo "Shutting down Emacs server"
    # wasn't removing emacs from ALT-TAB on mac
    # emacsclient -e "(server-force-delete)"
    emacsclient -e '(kill-emacs)'
    else
    echo "Emacs server not running"
    fi
}


# [ Xorg X11 ]
#--------------------------------------------

alias startx='startx &> /dev/shm/startx.log'

# 查看 窗口 class 属性 / 名称 # From : Archwiki Openbox
alias xp='xprop | grep "WM_WINDOW_ROLE\|WM_CLASS" && echo "WM_CLASS(STRING) = \"NAME\", \"CLASS\""'

function elimage {
    ## XXX 无效
    ##curl -F "screenshot=@$1" -F 'paste=1' http://paste.ubuntu.org.cn
    [ -f "$1" ] && curl --compressed -F "name=@$1" http://img.vim-cn.com/ || echo "$1 NOT image file"
}




# vim:set et ft=sh fdm=marker sw=4 sts=4 ts=4 nopaste :
